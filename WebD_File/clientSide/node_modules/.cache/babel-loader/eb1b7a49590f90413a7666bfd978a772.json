{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, USER_LOADED, USER_LOADING, AUTH_ERROR, INPUT_FAIL, INPUT_SUCCESS } from './types';\nimport { history } from '../../helpers/history';\nimport { returnErrors } from './errorActions'; //action creator for register\n\nexport const register = ({\n  username,\n  email,\n  password\n}) => async (dispatch, getState) => {\n  const registerSuccess = data => ({\n    type: REGISTER_SUCCESS,\n    payload: data\n  });\n\n  const registerFail = () => ({\n    type: REGISTER_FAIL\n  }); //setting up header on body for register http request\n\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  });\n  axios.post('http://127.0.0.1:5000/register', body, config).then(res => {\n    dispatch(registerSuccess(res.data));\n    history.push('/');\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch(registerFail());\n  });\n};\nexport const login = ({\n  email,\n  password\n}) => async (dispatch, getState) => {\n  const loginSuccess = data => ({\n    type: LOGIN_SUCCESS,\n    payload: data\n  });\n\n  const loginFail = () => ({\n    type: REGISTER_FAIL\n  });\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  console.log(body);\n  axios.post('http://127.0.0.1:5000/login', body, config).then(res => {\n    dispatch(loginSuccess(res.data));\n    history.push('/');\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch(loginFail());\n  });\n};\nexport const loadUser = () => async (dispatch, getState) => {\n  const userLoading = () => ({\n    type: USER_LOADING\n  });\n\n  dispatch(userLoading);\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  axios.get('http://127.0.0.1:5000/login/user', config).then(user => {\n    dispatch({\n      type: USER_LOADED,\n      payload: user.data.user\n    });\n  }).catch(err => {\n    // dispatch(returnErrors(err.response.data,err.response.status))\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};\nexport const logout = () => dispatch => {\n  const logoutcreator = () => ({\n    type: LOGOUT_SUCCESS\n  });\n\n  dispatch(logoutcreator());\n  history.push('/login');\n};\nexport const measuresize = req => (dispatch, getState) => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  const body = JSON.stringify(req);\n  axios.post('http://127.0.0.1:5000/measuresize', body, config).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data.user\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const tryItOn = product_id => (dispatch, getState) => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  console.log(`http://127.0.0.1:5000/tryiton/product/${product_id}`);\n  axios.get(`http://127.0.0.1:5000/tryiton/product/${product_id}`, config).then(res => {\n    // setTrialRoomImage(`https://192.168.1.34:5000/${res.data.trial_image}`)\n    // window.scrollTo(0,0)\n    // setDisplayLoader(false)\n    console.log(res.data);\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const inputSize = ({\n  chest,\n  frontal,\n  shoulder\n}) => async (dispatch, getState) => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  const body = JSON.stringify({\n    chest,\n    frontal,\n    shoulder\n  });\n  axios.post('http://127.0.0.1:5000/storeSize', body, config).then(res => {\n    dispatch({\n      type: INPUT_SUCCESS,\n      payload: res.data.user\n    });\n    console.log(res.data);\n  }).catch(err => {\n    console.log(err);\n  });\n};","map":{"version":3,"sources":["C:/Users/Lenovo/Downloads/Invincible-master/Invincible-master/clientSide/src/redux/actions/authAction.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","USER_LOADED","USER_LOADING","AUTH_ERROR","INPUT_FAIL","INPUT_SUCCESS","history","returnErrors","register","username","email","password","dispatch","getState","registerSuccess","data","type","payload","registerFail","config","headers","body","JSON","stringify","post","then","res","push","catch","err","response","status","login","loginSuccess","loginFail","console","log","loadUser","userLoading","token","auth","get","user","logout","logoutcreator","measuresize","req","tryItOn","product_id","inputSize","chest","frontal","shoulder"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,gBAAR,EAAyBC,aAAzB,EAAuCC,aAAvC,EAAqDC,UAArD,EAAgEC,cAAhE,EAA+EC,WAA/E,EAA2FC,YAA3F,EAAwGC,UAAxG,EAAmHC,UAAnH,EAA8HC,aAA9H,QAAkJ,SAAlJ;AACA,SAAQC,OAAR,QAAsB,uBAAtB;AACA,SAAQC,YAAR,QAA2B,gBAA3B,C,CAGA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAUC,EAAAA,KAAV;AAAgBC,EAAAA;AAAhB,CAAD,KAA8B,OAAOC,QAAP,EAAgBC,QAAhB,KAA4B;AAE9E,QAAMC,eAAe,GAAIC,IAAD,KAAW;AAACC,IAAAA,IAAI,EAACpB,gBAAN;AAAuBqB,IAAAA,OAAO,EAACF;AAA/B,GAAX,CAAxB;;AACA,QAAMG,YAAY,GAAG,OAAM;AAACF,IAAAA,IAAI,EAACnB;AAAN,GAAN,CAArB,CAH8E,CAI9E;;;AAEA,QAAMsB,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAC;AACJ,sBAAiB;AADb;AADG,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACd,IAAAA,QAAD;AAAUC,IAAAA,KAAV;AAAgBC,IAAAA;AAAhB,GAAf,CAAb;AAEAhB,EAAAA,KAAK,CAAC6B,IAAN,CAAW,gCAAX,EAA4CH,IAA5C,EAAiDF,MAAjD,EACKM,IADL,CACUC,GAAG,IAAG;AACRd,IAAAA,QAAQ,CAACE,eAAe,CAACY,GAAG,CAACX,IAAL,CAAhB,CAAR;AACAT,IAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACH,GAJL,EAKKC,KALL,CAKWC,GAAG,IAAG;AACTjB,IAAAA,QAAQ,CAACL,YAAY,CAACsB,GAAG,CAACC,QAAJ,CAAaf,IAAd,EAAmBc,GAAG,CAACC,QAAJ,CAAaC,MAAhC,EAAuC,eAAvC,CAAb,CAAR;AACAnB,IAAAA,QAAQ,CAACM,YAAY,EAAb,CAAR;AACH,GARL;AASH,CAvBM;AA0BP,OAAO,MAAMc,KAAK,GAAG,CAAC;AAACtB,EAAAA,KAAD;AAAOC,EAAAA;AAAP,CAAD,KAAsB,OAAOC,QAAP,EAAgBC,QAAhB,KAA4B;AACnE,QAAMoB,YAAY,GAAIlB,IAAD,KAAU;AAACC,IAAAA,IAAI,EAAClB,aAAN;AAAoBmB,IAAAA,OAAO,EAACF;AAA5B,GAAV,CAArB;;AACA,QAAMmB,SAAS,GAAG,OAAO;AAAClB,IAAAA,IAAI,EAACnB;AAAN,GAAP,CAAlB;;AAEA,QAAMsB,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAC;AACJ,sBAAiB;AADb;AADG,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACb,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAAf,CAAb;AAEAwB,EAAAA,OAAO,CAACC,GAAR,CAAYf,IAAZ;AAEA1B,EAAAA,KAAK,CAAC6B,IAAN,CAAW,6BAAX,EAAyCH,IAAzC,EAA8CF,MAA9C,EACKM,IADL,CACUC,GAAG,IAAI;AACTd,IAAAA,QAAQ,CAACqB,YAAY,CAACP,GAAG,CAACX,IAAL,CAAb,CAAR;AACAT,IAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACH,GAJL,EAKKC,KALL,CAKWC,GAAG,IAAE;AACRjB,IAAAA,QAAQ,CAACL,YAAY,CAACsB,GAAG,CAACC,QAAJ,CAAaf,IAAd,EAAmBc,GAAG,CAACC,QAAJ,CAAaC,MAAhC,EAAuC,YAAvC,CAAb,CAAR;AACAnB,IAAAA,QAAQ,CAACsB,SAAS,EAAV,CAAR;AACH,GARL;AASH,CAvBM;AAyBP,OAAO,MAAMG,QAAQ,GAAG,MAAI,OAAOzB,QAAP,EAAgBC,QAAhB,KAA2B;AAEnD,QAAMyB,WAAW,GAAG,OAAO;AAACtB,IAAAA,IAAI,EAACd;AAAN,GAAP,CAApB;;AACAU,EAAAA,QAAQ,CAAC0B,WAAD,CAAR;AACA,QAAMC,KAAK,GAAG1B,QAAQ,GAAG2B,IAAX,CAAgBD,KAA9B;AAEA,QAAMpB,MAAM,GAAE;AACVC,IAAAA,OAAO,EAAC;AACJ,sBAAiB;AADb;AADE,GAAd;;AAMA,MAAGmB,KAAH,EAAS;AACLpB,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCmB,KAAjC;AACH;;AAED5C,EAAAA,KAAK,CAAC8C,GAAN,CAAU,kCAAV,EAA6CtB,MAA7C,EACKM,IADL,CACUiB,IAAI,IAAE;AACR9B,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAACf,WADA;AAELgB,MAAAA,OAAO,EAACyB,IAAI,CAAC3B,IAAL,CAAU2B;AAFb,KAAD,CAAR;AAIH,GANL,EAOKd,KAPL,CAOWC,GAAG,IAAE;AACR;AACAjB,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAACb;AADA,KAAD,CAAR;AAGH,GAZL;AAaH,CA7BM;AAgCP,OAAO,MAAMwC,MAAM,GAAG,MAAK/B,QAAD,IAAa;AAEnC,QAAMgC,aAAa,GAAG,OAAK;AAAC5B,IAAAA,IAAI,EAAChB;AAAN,GAAL,CAAtB;;AACAY,EAAAA,QAAQ,CAACgC,aAAa,EAAd,CAAR;AAEAtC,EAAAA,OAAO,CAACqB,IAAR,CAAa,QAAb;AACH,CANM;AAQP,OAAO,MAAMkB,WAAW,GAAIC,GAAD,IAAQ,CAAClC,QAAD,EAAUC,QAAV,KAAqB;AACpD,QAAM0B,KAAK,GAAG1B,QAAQ,GAAG2B,IAAX,CAAgBD,KAA9B;AAEA,QAAMpB,MAAM,GAAE;AACVC,IAAAA,OAAO,EAAC;AACJ,sBAAiB;AADb;AADE,GAAd;;AAMA,MAAGmB,KAAH,EAAS;AACLpB,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCmB,KAAjC;AACH;;AAED,QAAMlB,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeuB,GAAf,CAAb;AAEAnD,EAAAA,KAAK,CAAC6B,IAAN,CAAW,mCAAX,EAA+CH,IAA/C,EAAoDF,MAApD,EACCM,IADD,CACMC,GAAG,IAAE;AACPd,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAACf,WADA;AAELgB,MAAAA,OAAO,EAACS,GAAG,CAACX,IAAJ,CAAS2B;AAFZ,KAAD,CAAR;AAIH,GAND,EAOCd,KAPD,CAOOC,GAAG,IAAE;AACRM,IAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACH,GATD;AAUH,CAzBM;AA2BP,OAAO,MAAMkB,OAAO,GAAIC,UAAD,IAAe,CAACpC,QAAD,EAAUC,QAAV,KAAqB;AACvD,QAAM0B,KAAK,GAAG1B,QAAQ,GAAG2B,IAAX,CAAgBD,KAA9B;AACA,QAAMpB,MAAM,GAAE;AACVC,IAAAA,OAAO,EAAC;AACJ,sBAAkB;AADd;AADE,GAAd;;AAKA,MAAGmB,KAAH,EAAS;AACLpB,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCmB,KAAjC;AACH;;AACDJ,EAAAA,OAAO,CAACC,GAAR,CAAa,yCAAwCY,UAAW,EAAhE;AAGArD,EAAAA,KAAK,CAAC8C,GAAN,CAAW,yCAAwCO,UAAW,EAA9D,EAAgE7B,MAAhE,EACCM,IADD,CACMC,GAAG,IAAE;AACP;AACA;AACA;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYV,GAAG,CAACX,IAAhB;AACH,GAND,EAOCa,KAPD,CAOOC,GAAG,IAAE;AACRM,IAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACH,GATD;AAUH,CAvBM;AAyBP,OAAO,MAAMoB,SAAS,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAOC,EAAAA,OAAP;AAAeC,EAAAA;AAAf,CAAD,KAA8B,OAAOxC,QAAP,EAAgBC,QAAhB,KAA4B;AAC/E,QAAM0B,KAAK,GAAG1B,QAAQ,GAAG2B,IAAX,CAAgBD,KAA9B;AAEA,QAAMpB,MAAM,GAAE;AACVC,IAAAA,OAAO,EAAC;AACJ,sBAAiB;AADb;AADE,GAAd;;AAMA,MAAGmB,KAAH,EAAS;AACLpB,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCmB,KAAjC;AACH;;AAED,QAAMlB,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAC2B,IAAAA,KAAD;AAAOC,IAAAA,OAAP;AAAeC,IAAAA;AAAf,GAAf,CAAb;AAEAzD,EAAAA,KAAK,CAAC6B,IAAN,CAAW,iCAAX,EAA6CH,IAA7C,EAAkDF,MAAlD,EACCM,IADD,CACMC,GAAG,IAAE;AACPd,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAACX,aADA;AAELY,MAAAA,OAAO,EAACS,GAAG,CAACX,IAAJ,CAAS2B;AAFZ,KAAD,CAAR;AAIAP,IAAAA,OAAO,CAACC,GAAR,CAAYV,GAAG,CAACX,IAAhB;AACH,GAPD,EAQCa,KARD,CAQOC,GAAG,IAAE;AACRM,IAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACH,GAVD;AAWH,CA1BM","sourcesContent":["import axios from 'axios'\nimport {REGISTER_SUCCESS,REGISTER_FAIL,LOGIN_SUCCESS,LOGIN_FAIL,LOGOUT_SUCCESS,USER_LOADED,USER_LOADING,AUTH_ERROR,INPUT_FAIL,INPUT_SUCCESS} from './types'\nimport {history} from '../../helpers/history'\nimport {returnErrors} from './errorActions'\n\n\n//action creator for register\n\nexport const register = ({username,email,password})=> async (dispatch,getState) =>{\n    \n    const registerSuccess = (data) => ({type:REGISTER_SUCCESS,payload:data})\n    const registerFail = () =>({type:REGISTER_FAIL})\n    //setting up header on body for register http request\n\n    const config = {\n        headers:{\n            \"Content-Type\" : \"application/json\"\n        }\n    }\n\n    const body = JSON.stringify({username,email,password})\n\n    axios.post('http://127.0.0.1:5000/register',body,config)\n        .then(res =>{\n            dispatch(registerSuccess(res.data))\n            history.push('/')\n        })\n        .catch(err =>{\n            dispatch(returnErrors(err.response.data,err.response.status,'REGISTER_FAIL'))\n            dispatch(registerFail())\n        })\n}\n\n\nexport const login = ({email,password}) => async (dispatch,getState) =>{\n    const loginSuccess = (data) =>({type:LOGIN_SUCCESS,payload:data})\n    const loginFail = () => ({type:REGISTER_FAIL})\n\n    const config = {\n        headers:{\n            \"Content-Type\" : \"application/json\"\n        }\n    }\n\n    const body = JSON.stringify({email,password})\n\n    console.log(body)\n\n    axios.post('http://127.0.0.1:5000/login',body,config)\n        .then(res => {\n            dispatch(loginSuccess(res.data))\n            history.push('/')\n        })\n        .catch(err=>{\n            dispatch(returnErrors(err.response.data,err.response.status,'LOGIN_FAIL'))\n            dispatch(loginFail())\n        })\n}\n\nexport const loadUser = ()=>async (dispatch,getState)=>{\n    \n    const userLoading = () => ({type:USER_LOADING})\n    dispatch(userLoading)\n    const token = getState().auth.token;\n\n    const config ={\n        headers:{\n            \"Content-Type\" : \"application/json\"\n        }\n    }\n\n    if(token){\n        config.headers['x-auth-token'] = token;\n    }\n\n    axios.get('http://127.0.0.1:5000/login/user',config)\n        .then(user=>{\n            dispatch({\n                type:USER_LOADED,\n                payload:user.data.user\n            })\n        })\n        .catch(err=>{\n            // dispatch(returnErrors(err.response.data,err.response.status))\n            dispatch({\n                type:AUTH_ERROR\n            })\n        })\n}\n\n\nexport const logout = ()=>(dispatch) =>{\n\n    const logoutcreator = ()=>({type:LOGOUT_SUCCESS})\n    dispatch(logoutcreator())\n\n    history.push('/login')\n}\n\nexport const measuresize = (req) =>(dispatch,getState)=>{\n    const token = getState().auth.token;\n\n    const config ={\n        headers:{\n            \"Content-Type\" : \"application/json\"\n        }\n    }\n\n    if(token){\n        config.headers['x-auth-token'] = token;\n    }\n\n    const body = JSON.stringify(req)\n\n    axios.post('http://127.0.0.1:5000/measuresize',body,config)\n    .then(res=>{\n        dispatch({\n            type:USER_LOADED,\n            payload:res.data.user\n        })\n    })\n    .catch(err=>{\n        console.log(err)\n    })\n}\n\nexport const tryItOn = (product_id) =>(dispatch,getState)=>{\n    const token = getState().auth.token;\n    const config ={\n        headers:{\n            \"Content-type\" :  \"application/json\"\n        }\n    }\n    if(token){\n        config.headers['x-auth-token'] = token;\n    }\n    console.log(`http://127.0.0.1:5000/tryiton/product/${product_id}`)\n\n\n    axios.get(`http://127.0.0.1:5000/tryiton/product/${product_id}`,config)\n    .then(res=>{\n        // setTrialRoomImage(`https://192.168.1.34:5000/${res.data.trial_image}`)\n        // window.scrollTo(0,0)\n        // setDisplayLoader(false)\n        console.log(res.data)\n    })\n    .catch(err=>{\n        console.log(err)\n    })\n}\n\nexport const inputSize = ({chest,frontal,shoulder}) => async (dispatch,getState) =>{\n    const token = getState().auth.token;\n\n    const config ={\n        headers:{\n            \"Content-Type\" : \"application/json\"\n        }\n    }\n\n    if(token){\n        config.headers['x-auth-token'] = token;\n    }\n\n    const body = JSON.stringify({chest,frontal,shoulder})\n\n    axios.post('http://127.0.0.1:5000/storeSize',body,config)\n    .then(res=>{\n        dispatch({\n            type:INPUT_SUCCESS,\n            payload:res.data.user\n        })\n        console.log(res.data);\n    })\n    .catch(err=>{\n        console.log(err)\n    })\n}"]},"metadata":{},"sourceType":"module"}