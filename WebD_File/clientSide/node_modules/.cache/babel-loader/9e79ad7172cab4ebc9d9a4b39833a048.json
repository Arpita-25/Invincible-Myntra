{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Downloads\\\\Invincible-master\\\\Invincible-master\\\\clientSide\\\\src\\\\components\\\\WebcamCapture\\\\WebcamCapture.js\";\nimport React, { useRef, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport './WebcamCapture.css';\nimport Webcam from 'react-webcam';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { measuresize } from '../../redux/actions/authAction';\nimport { USER_LOADED } from '../../redux/actions/types';\n\nfunction WebcamCapture(props) {\n  const webcamRef = useRef(null); // initializing the states\n\n  let [imgSrc, setImgSrc] = useState(null);\n  let [firstClickDone, setFirstClickDone] = useState(false);\n  let [secondClickDone, setSecondClickDone] = useState(false);\n  let [logs, setLogs] = useState([]);\n  let [imageToBeSent, setImageToBeSent] = useState('');\n  let [bodyForRequest, setBodyForRequest] = useState('');\n  let [secondImage, setSecondImage] = useState('');\n  let user = useSelector(state => state.auth.user);\n  var id;\n  let dispatch = useDispatch();\n  const handleCapture = useCallback(() => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImgSrc(imageSrc);\n  }, [webcamRef, setImgSrc]);\n\n  const handleRetake = event => {\n    event.preventDefault();\n    setImgSrc(null);\n  };\n\n  const deviceMotionEventHandler = event => {\n    id = requestAnimationFrame(() => {\n      // console.log('hello')\n      setLogs(prevLogs => [...prevLogs, {\n        xAcceleration: event.acceleration.x,\n        yAcceleration: event.acceleration.y,\n        zAcceleration: event.acceleration.z\n      }]);\n    });\n  };\n\n  const handleSubmit = useCallback(event => {\n    event.preventDefault();\n\n    if (!firstClickDone && !secondClickDone) {\n      setFirstClickDone(true);\n      setImageToBeSent(imgSrc);\n      setImgSrc('');\n      window.addEventListener('devicemotion', event => deviceMotionEventHandler(event));\n    } else if (firstClickDone && !secondClickDone) {\n      const imageSrc = webcamRef.current.getScreenshot(); // setImgSrc(imageSrc);\n      // setSecondClickDone(true)\n      // setSecondImage(imageSrc)\n\n      window.removeEventListener('devicemotion', deviceMotionEventHandler);\n      const req = {\n        image: imageToBeSent,\n        sensors_logs: logs,\n        second_image: imgSrc\n      };\n      const token = localStorage.getItem('token');\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n\n      if (token) {\n        config.headers['x-auth-token'] = token;\n      }\n\n      const body = JSON.stringify(req);\n      props.handleCleanUp();\n      props.setDisplayLoader(true);\n      cancelAnimationFrame(id); // axios.post('https://192.168.1.34:5000/measuresize',body,config)\n      // .then(res=>{\n      //     console.log(res)\n      //     dispatch({\n      //         type:USER_LOADED,\n      //         payload:res.data.user\n      //     })\n      //     props.setDisplayLoader(false)\n      //     props.setCaptureDone(true)\n      // })\n      // .catch(err=>{\n      //     console.log(err)\n      // })\n      // // props.setTrialRoomImage('https://192.168.1.34:5000/upload/c1b89fdb-b250-44da-99ec-e2c34b13cd4f.jpg')\n      // // props.handleCleanUp()\n      // props.handleCleanUp()\n      // // props.setCaptureDone(true)\n      // props.setDisplayLoader(true)\n\n      setTimeout(() => {\n        props.setDisplayLoader(false);\n        props.setCaptureDone(true);\n      }, 10000);\n    }\n  });\n  const videoConstraints = {\n    width: 480,\n    height: 300,\n    facingMode: \"environment\"\n  };\n  console.log('It is being reloaded');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"webcam-outer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"webcam-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Webcam, {\n    audio: false,\n    ref: webcamRef,\n    screenshotFormat: \"image/jpeg\",\n    videoConstraints: videoConstraints,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleCapture,\n    className: \"capture-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: props.handleCaptureClose,\n    className: \"cancel-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-times\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 83\n    }\n  })), imgSrc && /*#__PURE__*/React.createElement(\"img\", {\n    src: imgSrc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 29\n    }\n  }), imgSrc && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleRetake,\n    className: \"camera-icons retake\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 28\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-reply \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 91\n    }\n  })), imgSrc && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmit,\n    className: \"camera-icons save\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 28\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-check \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 89\n    }\n  }))));\n}\n\nexport default WebcamCapture;","map":{"version":3,"sources":["C:/Users/Lenovo/Downloads/Invincible-master/Invincible-master/clientSide/src/components/WebcamCapture/WebcamCapture.js"],"names":["React","useRef","useState","useCallback","axios","Webcam","useDispatch","useSelector","measuresize","USER_LOADED","WebcamCapture","props","webcamRef","imgSrc","setImgSrc","firstClickDone","setFirstClickDone","secondClickDone","setSecondClickDone","logs","setLogs","imageToBeSent","setImageToBeSent","bodyForRequest","setBodyForRequest","secondImage","setSecondImage","user","state","auth","id","dispatch","handleCapture","imageSrc","current","getScreenshot","handleRetake","event","preventDefault","deviceMotionEventHandler","requestAnimationFrame","prevLogs","xAcceleration","acceleration","x","yAcceleration","y","zAcceleration","z","handleSubmit","window","addEventListener","removeEventListener","req","image","sensors_logs","second_image","token","localStorage","getItem","config","headers","body","JSON","stringify","handleCleanUp","setDisplayLoader","cancelAnimationFrame","setTimeout","setCaptureDone","videoConstraints","width","height","facingMode","console","log","handleCaptureClose"],"mappings":"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","sourcesContent":["import React,{useRef,useState,useCallback} from 'react'\nimport axios from 'axios'\nimport './WebcamCapture.css'\nimport Webcam from 'react-webcam'\nimport {useDispatch,useSelector} from 'react-redux'\nimport {measuresize} from '../../redux/actions/authAction'\nimport {USER_LOADED} from '../../redux/actions/types'\n\nfunction WebcamCapture(props) {\n\n    \n    const webcamRef = useRef(null);\n\n    // initializing the states\n    let [imgSrc, setImgSrc] = useState(null);\n    let [firstClickDone,setFirstClickDone] = useState(false)\n    let [secondClickDone,setSecondClickDone] = useState(false)\n    let [logs,setLogs] = useState([])\n    let [imageToBeSent,setImageToBeSent] = useState('')\n    let [bodyForRequest,setBodyForRequest] = useState('')\n    let [secondImage,setSecondImage] = useState('')\n    let user = useSelector(state => state.auth.user)\n    var id ;\n\n    let dispatch = useDispatch()\n\n    const handleCapture = useCallback(() => {\n        const imageSrc = webcamRef.current.getScreenshot();\n        setImgSrc(imageSrc);\n      }, [webcamRef, setImgSrc]);\n\n    const handleRetake = (event)=>{\n        event.preventDefault()\n        setImgSrc(null)\n    }\n\n    const deviceMotionEventHandler = (event) =>{\n        id = requestAnimationFrame(()=>{\n            // console.log('hello')\n            setLogs((prevLogs)=>[...prevLogs,\n                {\n                xAcceleration: event.acceleration.x,\n                yAcceleration: event.acceleration.y,\n                zAcceleration: event.acceleration.z,\n            }])\n        })\n    }\n\n    const handleSubmit = useCallback((event)=>{\n        event.preventDefault();\n\n\n        if(!firstClickDone && !secondClickDone){\n            setFirstClickDone(true);\n            setImageToBeSent(imgSrc)\n            setImgSrc('')\n            window.addEventListener('devicemotion',(event)=>deviceMotionEventHandler(event),)\n        }\n        else if(firstClickDone && !secondClickDone){\n            const imageSrc = webcamRef.current.getScreenshot();\n            // setImgSrc(imageSrc);\n            // setSecondClickDone(true)\n            // setSecondImage(imageSrc)\n            window.removeEventListener('devicemotion',deviceMotionEventHandler)\n            const req = {\n                image: imageToBeSent,\n                sensors_logs:logs,\n                second_image:imgSrc\n            }\n\n\n            const token = localStorage.getItem('token')\n\n            const config ={\n                headers:{\n                    \"Content-Type\" : \"application/json\"\n                }\n            }\n        \n            if(token){\n                config.headers['x-auth-token'] = token;\n            }\n        \n            const body = JSON.stringify(req)\n            props.handleCleanUp()\n            props.setDisplayLoader(true)\n            cancelAnimationFrame(id)\n\n            // axios.post('https://192.168.1.34:5000/measuresize',body,config)\n            // .then(res=>{\n            //     console.log(res)\n            //     dispatch({\n            //         type:USER_LOADED,\n            //         payload:res.data.user\n            //     })\n            //     props.setDisplayLoader(false)\n            //     props.setCaptureDone(true)\n            // })\n            // .catch(err=>{\n            //     console.log(err)\n            // })\n\n\n\n            // // props.setTrialRoomImage('https://192.168.1.34:5000/upload/c1b89fdb-b250-44da-99ec-e2c34b13cd4f.jpg')\n            // // props.handleCleanUp()\n            // props.handleCleanUp()\n            // // props.setCaptureDone(true)\n            // props.setDisplayLoader(true)\n            setTimeout(()=>{\n                props.setDisplayLoader(false)\n                props.setCaptureDone(true)\n            },10000)\n            \n        }\n\n    })\n\n    const videoConstraints = {\n        width:480,\n        height:300,\n        facingMode: \"environment\"\n    };\n\n    console.log('It is being reloaded')\n\n    return  (\n        <div className='webcam-outer-container'>\n            <div className='webcam-container'>\n                <Webcam\n                    audio={false}\n                    ref={webcamRef}\n                    screenshotFormat=\"image/jpeg\"\n                    videoConstraints={videoConstraints}\n                />\n                <button onClick={handleCapture} className='capture-btn'></button>\n                <button onClick={props.handleCaptureClose} className='cancel-btn'><i className='fas fa-times'></i></button>\n                \n                {imgSrc && (<img src={imgSrc}/>)}\n                {imgSrc &&(<button onClick={handleRetake} className='camera-icons retake'><i  className=\"fas fa-reply \"></i></button>)}\n                {imgSrc &&(<button onClick={handleSubmit} className='camera-icons save'><i  className=\"fas fa-check \"></i></button>)}\n                \n                \n            </div>\n        </div>\n    )\n}\n\nexport default WebcamCapture\n"]},"metadata":{},"sourceType":"module"}